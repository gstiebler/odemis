# Simulated SECOM system using a composited scanner and a JEOL SEM IT300 over IP.
SECOMv2: {
    class: Microscope,
    role: secom,
    children: ["Light Engine", "SEM E-beam full",
               "Optical Objective", "Optical Emission Filter",
               "Camera", "SEM Detector", "EBeam Focus",
               "Sample Stage", "Objective Stage", "Optical Focus"],
}

# LedHub
"Light Engine": {
    class: omicronxx.HubxX,
    role: light,
    init: {
        port: "/dev/fakehub",
        #port: "/dev/ttyFTDI*",
    },
    # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Camera"],
}

# Merges the scan interface e-beam and the e-beam control (via API)
"SEM E-beam full": {
    class: scanner.CompositedScanner,
    role: e-beam,
    children: {external: "SEM E-beam", internal: "EBeam control"},
    init: {},
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
    },
    affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "SEM E-beam", detector0: "SEM Detector"}
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    creator: "SEM Scan Interface",
    role: null,
    init: {
        channels: [0, 1],
        max_res: [4096, 3072], # px, to force 4:3 ratio
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 10.e-6, # s
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        # output ports -> True (indicate scanning) or False (indicate parked) + VA name
        # Conventional VA names are: external, blanker, led, power
        scanning_ttl: {0: [True, "external"], 4: True},
        hfw_nomag: 0.127, # m
    },
}
 
# Must be connected on AI 5/AI GND
"SEM Detector": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        # channel: 1,
        limits: [-2, 2] # V
    },
}

"SEM via API": {
    class: jeol.EXCSSEM,
    role: null,
    init: {
           host: "fake", # IP address of the IT-300 SEM
           # host: "192.168.158.50",
           # port: 22300,
    },
    children: {
        scanner: "EBeam control",
        focus: "EBeam Focus",
    }
}

"EBeam control": {
    creator: "SEM via API",
    role: null,
    init: {
        # Should be the same as the semcomedi
        hfw_nomag: 0.127,  # m, theoretical HFW if mag == 1x
    },
}

"EBeam Focus": {
    # Internal child of SUIPSEM, so no class
    role: ebeam-focus,
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 40.0, # ratio, (actually of the complete light path)
       na: 0.95, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
    },
    affects: ["Camera"]
}

# Semrock FF01-440/521/607/700
"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9],
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Camera"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {
        device: 0,
        image: "andorcam2-fake-clara.tiff",
    },
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # Â°C
    }
}

# Use 3 MultiplexActuators to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
"Sample Stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: ["Camera", "SEM E-beam"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "sx", "y": "sy"},
    },
}

"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Camera"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "ox", "y": "oy"},
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)
"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Camera"],
    children: {"z": "Stage Actuators"},
    init: {
        axes_map: {"z": "oz"}
    },
}

# Network should be set up and the C-863 should be configured for DHCP.
# Each E-861 should be configured for the right stage.
# PI E-861 addresses and stage configuration:
# optical X = 1 (open loop)
# optical Y = 2 (open loop)
# optical Z = 3 (closed loop)
# stage X = 4 (closed loop)
# stage Y = 5 (closed loop)

"Stage Actuators": {
    class: pigcs.FakeBus,
    role: none,
    init: {
        port: "/dev/fake",
        # axis -> controller, channel, closed-loop?
        axes: {"ox": [1, 1, False], "oy": [2, 1, False],
               "oz": [3, 1, True],
               "sx": [4, 1, True], "sy": [5, 1, True]},
        inverted: ["ox", "oy", "oz", "sy"], # sx is good
        #dist_to_steps: {"ox": 100000, "oy": 100000}, # step/m
        # automatically turn off encoders for SX/SY to avoid vibrations
        auto_suspend: {"oz": 1, "sx": 1, "sy": 1}, # s
    },
}
